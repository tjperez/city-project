{"version":3,"sources":["cityResult.js","App.js","serviceWorker.js","index.js"],"names":["CityResult","elems","this","props","zipcodes","map","elem","index","react_default","a","createElement","key","className","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchCity","evt","userInput","target","value","toUpperCase","axios","get","then","res","setState","zipArr","data","found","catch","err","state","comp","cityResult","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAoBeA,0LAhBP,IAAIC,EAOJ,OANAA,EAAQC,KAAKC,MAAMC,SAASC,IAAI,SAACC,EAAMC,GACnC,OAAQC,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,SAAOC,IAAKJ,GAAQD,MAKxBE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAd,UACCX,UAZQY,IAAMC,YCqDhBC,cA9Cb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KAQVmB,WAAa,SAACC,GACZ,IAAIC,EAAYD,EAAIE,OAAOC,MAC3BF,EAAYA,EAAUG,cAGtBC,IAAMC,IAAI,yCAA2CL,GAClDM,KAAK,SAACC,GAELf,EAAKgB,SAAS,CAAEC,OAAQF,EAAIG,KAAMC,OAAO,MAE1CC,MAAM,SAACC,GAENrB,EAAKgB,SAAS,CAAEG,OAAO,OAnBzBnB,EAAKsB,MAAQ,CACXL,OAAQ,GACRE,OAAO,GAJQnB,wEA0BnB,IAAIuB,EAMF,OAJAA,EADErC,KAAKoC,MAAMH,MACN3B,EAAAC,EAAAC,cAAC8B,EAAD,CAAY7B,IAAI,YAAYP,SAAWF,KAAKoC,MAAML,SAElDzB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,MAAd,cAGLJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAd,eACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,UAAb,gBACAJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,QAAQ6B,KAAK,OAAOC,SAAUxC,KAAKoB,aAGnDiB,UAzCS1B,IAAMC,WCKJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.7d653963.chunk.js","sourcesContent":["import React from 'react';\n\nclass CityResult extends React.Component {\n    render() {\n        let elems = [];\n        elems = this.props.zipcodes.map((elem, index) => {\n            return (<div>\n                <label key={index}>{elem}</label>\n            </div>)\n        });\n\n        return (\n            <div className=\"city-result\">\n                <h3 className=\"h3\">Result</h3>\n                {elems}\n            </div>\n        );\n    }\n}\n\nexport default CityResult","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport CityResult from './cityResult';\n\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      zipArr: [],\n      found: false\n    \n  }\n}\n\nsearchCity = (evt) => {\n  let userInput = evt.target.value;\n  userInput = userInput.toUpperCase();\n  // console.log(userInput);\n\n  axios.get('http://ctp-zip-api.herokuapp.com/city/' + userInput)\n    .then((res) => {\n      // console.log(res))\n      this.setState({ zipArr: res.data, found: true });\n    })\n    .catch((err) => {\n      // console.log(\"Didnt work :( ==>\" + err);\n      this.setState({ found: false });\n    });\n}\n\nrender() {\n  let comp;\n  if (this.state.found)\n    comp = <CityResult key='something' zipcodes={(this.state.zipArr)} />;\n  else\n    comp = <h2 className=\"h2\">No results</h2>\n\n    return (\n      <div className=\"App\">\n        <h1 className='title'>City Search</h1>\n        <p className=\"e-city\"> Enter city:</p>\n        <input className=\"input\" type=\"text\" onChange={this.searchCity} />\n\n        {/* <CityResult zipcodes={(...this.state.zipArr)}/> */}\n        {comp}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}